/*Вам доступна база данных, принадлежащая автовокзалу города Брайт Фоллс. Она включает таблицы Buses и Passengers. Первая таблица хранит информацию об автобусах, вторая — информацию о пассажирах.
Таблица Buses

+----+----------------+
| id | departure_time |
+----+----------------+
| 1  | 2              |
| 2  | 4              |
| 3  | 7              |
| 4  | 9              |
| 5  | 11             |
| 6  | 13             |
| 7  | 15             |
| 8  | 17             |
| 9  | 19             |
| 10 | 21             |
| 11 | 1              |
| 12 | 3              |
| 13 | 5              |
+----+----------------+

Первое поле этой таблицы содержит идентификатор автобуса, второе — час выезда автобуса с автовокзала. Гарантируется, что никакие два автобуса не выезжают в одно и то же время.
Таблица Passengers

+----+--------------+
| id | arrival_time |
+----+--------------+
| 11 | 1            |
| 12 | 5            |
| 13 | 6            |
| 14 | 7            |
| 15 | 2            |
| 16 | 10           |
| 17 | 14           |
| 18 | 7            |
| 19 | 9            |
| 20 | 20           |
| 21 | 3            |
| 22 | 8            |
| 23 | 11           |
| 24 | 18           |
| 25 | 4            |
| 26 | 12           |
| 27 | 19           |
| 28 | 16           |
| 29 | 6            |
| 30 | 14           |
+----+--------------+

Первое поле этой таблицы содержит идентификатор пассажира, второе — час прибытия пассажира на автовокзал.

Пассажиры прибывают на автовокзал в определенное время и из доступных автобусов выбирают тот, который уезжает раньше всех.

Напишите запрос, который определяет, со скольким количеством пассажиров выедет из автовокзала каждый автобус, и отображает полученный результат в виде таблицы из двух полей:

    bus_id — идентификатор автобуса
    passenger_count — количество пассажиров в этом автобусе

Записи в результирующей таблице должны быть расположены в порядке возрастания значения поля bus_id.
Результат запроса

+--------+-----------------+
| bus_id | passenger_count |
+--------+-----------------+
| 1      | 1               |
| 2      | 1               |
| 3      | 4               |
| 4      | 2               |
| 5      | 2               |
| 6      | 1               |
| 7      | 2               |
| 8      | 1               |
| 9      | 2               |
| 10     | 1               |
| 11     | 1               |
| 12     | 1               |
| 13     | 1               |
+--------+-----------------+

Скрипт для создания таблиц Buses и Passengers

DROP TABLE IF EXISTS Passengers;
DROP TABLE IF EXISTS Buses;

-- Создание таблицы Buses
CREATE TABLE Buses
(
    id             INT PRIMARY KEY AUTO_INCREMENT,
    departure_time INT
);

INSERT INTO Buses (departure_time)
VALUES (2),
       (4),
       (7),
       (9),
       (11),
       (13),
       (15),
       (17),
       (19),
       (21),
       (1),
       (3),
       (5);
-- Создание таблицы Passengers
CREATE TABLE Passengers
(
    id           INT PRIMARY KEY,
    arrival_time INT
);

INSERT INTO Passengers (id, arrival_time)
VALUES (11, 1),
       (12, 5),
       (13, 6),
       (14, 7),
       (15, 2),
       (16, 10),
       (17, 14),
       (18, 7),
       (19, 9),
       (20, 20),
       (21, 3),
       (22, 8),
       (23, 11),
       (24, 18),
       (25, 4),
       (26, 12),
       (27, 19),
       (28, 16),
       (29, 6),
       (30, 14);

Примечание 1. Час выезда автобуса с автовокзала и час прибытия пассажира на автовокзал представлены числами в диапазоне [0; 23].

Примечание 2. При решении задачи используйте обобщенное табличное выражение для визуального упрощения запроса.*/
-- ----------------------------------------






WITH cte1 AS ( -- все автобусы, где время убытия позже или равно прибытию пассажира
				SELECT 
					Passengers.id AS id_pas
                    , Passengers.arrival_time
                    , Buses.id AS id_bus
                    , Buses.departure_time
				FROM Passengers CROSS JOIN Buses
				WHERE Passengers.arrival_time <= Buses.departure_time
),

cte2 AS ( -- пассажир, автобусы на которых можно уехать, время убытия автобуса
		 SELECT 
			id_pas
			, id_bus
			, departure_time    
		 FROM cte1
         ORDER BY 
			id_pas
			, departure_time
),

cte3 AS ( -- выбираем из них автобусы с минимальным временем для убытия 
SELECT *
FROM cte2
WHERE (id_pas, departure_time) = 	  (SELECT 
											id_pas 
											, MIN(departure_time) as t
										FROM cte1
                                        WHERE cte2.id_pas = cte1.id_pas
										GROUP BY id_pas
                                        )					
),

cte4 AS ( -- со скольким количеством пассажиров выедет из автовокзала каждый автобус
SELECT
	id_bus AS bus_id
    , COUNT(id_pas) AS passenger_count 
FROM cte3
GROUP BY id_bus
)



SELECT * FROM cte4
ORDER BY bus_id

